{"components/customers-canvas/customers-canvas-uif":"<style>\r\n    :root {\r\n  --au-h1-font_-_font-weight: 400;\r\n  --au-h2-font_-_font-weight: 400;\r\n  --au-h3-font_-_font-weight: 400;\r\n  --au-header-button-geometry_-_border-radius: 20px;\r\n  --au-header-button-geometry_-_min-width: 80px;\r\n  --aurigma-drawer-panel-desktop-width: 30% !important;\r\n}\r\n\r\n.au-popup-close-button {\r\n    display: none !important;\r\n}\r\n\r\n.skip-to-main-link {\r\n    display: none;\r\n}\r\n</style>\r\n\r\n<script type=\"application/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jquery/1.12.1/jquery.min.js\"></script>\r\n\r\n<script>\r\n\r\n    var context = JSON.parse({{ jsContext }});\r\n    var integrationInfo;\r\n    var userInfo;\r\n    var storefront;\r\n\r\n    async function loadEditor(context, formData, restoreData) {\r\n        await editorInitialization(context, formData, restoreData);\r\n        updateDriverParams(formData);\r\n    }\r\n\r\n    function updateDriverParams(formData) {\r\n        let driver = window.auWizard.scope.driver;\r\n        driver.cart.lineItems[0].quantity = getQuantity(formData);\r\n    }\r\n\r\n    function getQuantity(formData) {\r\n        let quantity = 1;\r\n        const quantityParam = formData.find(x => { return x['name'] === 'qty[]' });\r\n        if (quantityParam) {\r\n            quantity = quantityParam['value'];\r\n        }\r\n\r\n        return quantity;\r\n    }\r\n\r\n    function getFormData() {\r\n        let forms = document.querySelectorAll('form[data-cart-item-add]')\r\n        if (!forms || forms.length === 0) {\r\n            console.error('Product options form was not found.');\r\n            return;\r\n        }\r\n        let form = forms[0];\r\n        let button = form.querySelector('#personalize-button');\r\n        if (!button) {\r\n            button = form.querySelector('button[name=\\\"add-to-cart\\\"]');\r\n        }\r\n        if (!button) {\r\n            console.error('Submit button was not found.');\r\n            return;\r\n        }\r\n\r\n        console.log(form);\r\n        let formData = jQuery(form).serializeArray();\r\n        addPersonalizeYesOptionToFormData(formData);\r\n        return formData;\r\n    }\r\n\r\n    function addPersonalizeYesOptionToFormData(formData) {\r\n      const personalizeOption = window.BCData?.customersCanvasOptions?.personalizeOption;\r\n      if(!personalizeOption) {\r\n          console.error(\"Personalize option is not found\");\r\n          return;\r\n      };\r\n\r\n      formData.find(f => f.name === `attribute[${personalizeOption.id}]`).value =  personalizeOption.values.find(v => v.label == 'Yes').id;\r\n    }\r\n\r\n    function showEditor() {\r\n        // hideLockShroud();\r\n\r\n        if (window.auWizard && window.auWizard.scope.driver) {\r\n            window.auWizard.showEditorPopup();\r\n        } else {\r\n            document.getElementById('customers-canvas-editor-parent').addEventListener('load', function () {\r\n                window.auWizard.showEditorPopup();\r\n            });\r\n        }\r\n    }\r\n\r\n    async function editorInitialization(context, formData, restoreState) {\r\n        \r\n        const config = JSON.parse(this.integrationInfo.config);\r\n        config.displayInPopup = true;\r\n        this.integrationInfo.config = JSON.stringify(config);\r\n        this.integrationInfo.ecommerceSystemType = 7;\r\n        this.integrationInfo.optionBasedProductInfo.selectedVariantSku = window.BCData.product_attributes.sku ?? \"\"\r\n\r\n        const container = document.querySelector(\"#customers-canvas-editor-parent\");\r\n\r\n        const productModel = context.product;\r\n        setOptionsToModel(formData, productModel);\r\n        const orderRestoreData = restoreState ? restoreOrderData() : null;\r\n        const driver = await this.storefront.loadEditor(container, this.integrationInfo, this.userInfo, productModel, orderRestoreData);\r\n\r\n        const personalizeButton = document.querySelector('#personalize-button');\r\n        personalizeButton.disabled = false;\r\n\r\n        this.storefront.onFinish.subscribe(async (bo, project) => {\r\n            for (let x of project.line_items) {\r\n                let i = project.line_items.indexOf(x);\r\n                let data = {\r\n                    items: [\r\n                        {\r\n                            key: x.key || '',\r\n                            externalId: auWizard.scope.driver.cart.lineItems[i]._cartItemId || '',\r\n                            quantity: x.quantity || 1,\r\n                            userId: x.userId || '',\r\n                            designIds: x.stateId || [],\r\n                            fields: x.fields || {},\r\n                            hidden: JSON.stringify(x.hidden) || ''\r\n                        },\r\n                    ]\r\n                }\r\n\r\n                try {\r\n                    const response = await fetch(`https://bigcommerce-adapter.azurewebsites.net/api/bigcommerce-adapter/v1/raw-projects?tenantId=1379&storefrontId=1397`,\r\n                        {\r\n                            method: 'POST',\r\n                            body: JSON.stringify(data),\r\n                            headers: {\r\n                                'Content-type': 'application/json',\r\n                            },\r\n                        });\r\n                    if (response.ok) {\r\n\r\n                        const data = await response.json();\r\n                        if (data.status == 'success') {\r\n                            console.log(data);\r\n                        } else {\r\n                            console.error('error: ' + data.message);\r\n                        }\r\n                    } else {\r\n                        let errorText = await response.text();\r\n                        console.error(\"failed to load \" + response.url, response.status, response.statusText, errorText);\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    console.log('caught it!', ex);\r\n                }\r\n\r\n                if (bo._apps.driver.cart._lineItems[0].props === undefined) {\r\n                    let editorLinkOption = bo._apps.driver.products.current._options.find(x => x.title === 'BackOffice project link');\r\n                    let valuesArray = [\r\n                        data.items[0].key,\r\n                    ];\r\n                    await bo._apps.driver._cart._lineItems.current.choices.update(editorLinkOption, valuesArray);\r\n                } else {\r\n                    bo._apps.driver.cart.lineItems.forEach((item, i) => {\r\n                        item.data.projectId = data.items[i].key\r\n                    });\r\n                }\r\n            }\r\n\r\n            hideEditor();\r\n        });\r\n\r\n    }\r\n\r\n    function setOptionsToModel(formData, productModel) {\r\n        console.log(formData);\r\n        const formOptions = formData.filter(x => { return x['name'].startsWith('attribute['); });\r\n        formOptions.forEach(formOption => {\r\n            try {\r\n                const optionId = formOption['name'].match(/\\d+/)[0];\r\n                const optionValue = formOption['value'];\r\n                const option = productModel.options.find(x => x.id === parseInt(optionId));\r\n                option.values.forEach(value => {\r\n                    if (value.id === parseInt(optionValue)) {\r\n                        value.selected = true;\r\n                    } else {\r\n                        value.selected = false;\r\n                    }\r\n                });\r\n            } catch (ex) {\r\n                console.error('Unable to preselect option', ex);\r\n            }\r\n        });\r\n    }\r\n\r\n    async function restoreEditionOnce(context) {\r\n        let formData = new FormData();\r\n        const restoredFormData = restoreFormData();\r\n        Object.keys(restoredFormData).forEach(key => {\r\n            formData.set(key, restoredFormData[key]);\r\n        })\r\n        const formDataArray = formDataToDictionary(formData);\r\n        await loadEditor(context, formDataArray, true);\r\n        showEditor();\r\n    }\r\n\r\n    function isReturned() {\r\n        const params = getQueryParameters();\r\n        return !!params['snapshot'];\r\n    }\r\n\r\n    function getQueryParameters(url) {\r\n        const params = {};\r\n        if (!url) url = window.location.href;\r\n        const queryIndex = url.lastIndexOf('?');\r\n        const query = url.substring(queryIndex === -1 ? url.length : queryIndex + 1);\r\n        const vars = query.split('&');\r\n        for (let i = 0; i < vars.length; i++) {\r\n            const pair = vars[i].split('=');\r\n            params[pair[0]] = decodeURIComponent(pair[1]);\r\n        }\r\n        delete params[\"\"];\r\n        console.log(params);\r\n        return params;\r\n    }\r\n\r\n    function restoreOrderData() {\r\n        const params = getQueryParameters();\r\n\r\n        const orderRestoreData = {\r\n            stateId: params['stateId'],\r\n            snapshot: params['snapshot'],\r\n            key: params['cartItemId'],\r\n        };\r\n        return orderRestoreData;\r\n    }\r\n\r\n    function restoreFormData() {\r\n        const formRestoreData = {};\r\n        const params = getQueryParameters();\r\n        var options = Object.keys(params).reduce(function (options, key) {\r\n            if (key.startsWith('option_')) {\r\n                let optionId = key.match(/\\d+/)[0]\r\n                options[`attribute[${optionId}]`] = params[key];\r\n            }\r\n            return options;\r\n        }, {});\r\n        for (let key of Object.keys(options)) {\r\n            formRestoreData[key] = options[key];\r\n        }\r\n        formRestoreData['quantity'] = params['quantity']\r\n        return formRestoreData;\r\n    }\r\n\r\n    function formDataToDictionary(formData) {\r\n        const result = [];\r\n        for (var pair of formData) {\r\n            result.push({\r\n                'name': pair[0],\r\n                'value': pair[1],\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function hideEditor() {\r\n        auWizard.closeEditorPopup(true);\r\n    }\r\n\r\n    async function preload() {\r\n        this.userInfo = {\r\n            id: context.customer ? context.customer.id : 'guest', // ?\r\n            data: {\r\n                ...(context.customer) && { name: context.customer.name },\r\n                ...(context.customer) && { email: context.customer.email }\r\n            }\r\n        };\r\n        const bigCommerceUrl = window.location.origin // ?\r\n        const sku = document.querySelector('[data-product-sku]') // for addtocart\r\n\r\n        const pluginSettings = {\r\n            bigcommerceAdapterUrl: \"https://bigcommerce-adapter.azurewebsites.net/\",\r\n            customersCanvasBaseUrl: \"https://customerscanvashub.com\",\r\n            bigCommerceBaseUrl: bigCommerceUrl,\r\n            locale: 'en',   // hardcode\r\n            currency: context.product.price.without_tax.currency,\r\n            cartUrl: `cart.php`,\r\n            redirectToCartAfterAdd: false, // ?\r\n            addToCartUrl: `remote/v1/cart/add`,\r\n            addToCartUpdateUrl: 'cart.php',\r\n            updatePriceUrl: '???', // ?\r\n            ecommerceSystemType: 7,\r\n        };\r\n        this.storefront = new Aurigma.BackOffice({\r\n            tenantId: 1379,\r\n            ecommerceSystemId: 1397,\r\n            backOfficeUrl: 'https://customerscanvashub.com',\r\n            pluginSettings: pluginSettings,\r\n            themeSettings : { primaryColor: '#b78a31' }\r\n        });\r\n        \r\n        this.integrationInfo = await storefront.templates.findByProduct(context.product.id);\r\n\r\n        const result = await storefront.preload(this.integrationInfo, this.userInfo);\r\n    }\r\n\r\n    function addPersonalizeButton(context) {\r\n        const personalizeButton = document.querySelector('#personalize-button');\r\n        personalizeButton && personalizeButton.addEventListener('click', onPersonalize);\r\n        personalizeButton.classList.remove('loading');\r\n        personalizeButton.disabled = false;\r\n\r\n        function onPersonalize() {\r\n            let formData = getFormData()\r\n            loadEditor(context, formData, false)\r\n            showEditor()\r\n        }\r\n    }\r\n\r\n\r\n    document.addEventListener(\"DOMContentLoaded\", async () => {\r\n        await preload();\r\n        this.addPersonalizeButton(this.context);\r\n        const isRestored = isReturned();\r\n        //let stepInited = false\r\n        if (isRestored) {\r\n            await restoreEditionOnce(this.context);\r\n            //cleanUrl();\r\n        } else {\r\n            //cleanUrl();\r\n        }\r\n    });\r\n</script>\r\n"}
